#!/usr/bin/env node

var fs = require("fs")
var path = require("path")
var program = require("commander")
var marked = require("marked")
var title = require("to-title-case")
var iniparser = require("iniparser")
var flatten = require("flatten")
var pkg = require("../package.json")
var App = require("..")

program
  .version(pkg.version)

program
  .command("init")
  .description("Create an app.json for the current directory's app")
  .action(function(program){
    if (fs.existsSync(process.cwd() + "/app.json")) {
      return console.log("This directory already contains an app.json. Run `app validate` to verify it.")
    }

    var app = App.new()
    app.name = title(path.basename(process.cwd()))
    app.description = "TODO: Add a short blurb about " + app.name
    app.keywords = ["small", "sharp", "tool"]
    app.addons = []

    if (fs.existsSync(process.cwd() + "/.git")) {
      var git = iniparser.parseString(fs.readFileSync(process.cwd() + "/.git/config").toString())
    }

    if (!git) {
      fs.writeFile(process.cwd() + "/app.json", app.toJSON(), function(err) {
        if (err) console.error(err)
        console.log("Created app.json\n")
        console.log(app.toJSON())
      })
      return;
    }

    var herokuRemotes = Object.keys(git).filter(function(key) {
      return git[key].url && git[key].url.match("git@heroku.com")
    })

    if (!herokuRemotes.length) {
      fs.writeFile(process.cwd() + "/app.json", app.toJSON(), function(err) {
        if (err) console.error(err)
        console.log("Created app.json\n")
        console.log(app.toJSON())
      })
      return;
    }

    var herokuAppName = git[herokuRemotes[0]].url.match(/git@heroku\.com:(.*)\.git/)[1]
    // console.log(herokuAppName)

    var herokuCreds = require('netrc')()['api.heroku.com']
    var Heroku = require('heroku-client')
    var heroku = new Heroku({token: herokuCreds.password})

    console.log("\nFetching addons for " + herokuAppName)
    heroku.get("/apps/" + herokuAppName + "/addons", function(err, addons) {
      if (err) throw(err)
      var addon_config_vars, env
      app.addons = addons.map(function(addon) {
        return addon.plan.name
      })

      addon_config_vars = flatten(addons.map(function(addon) {
        return addon.config_vars
      }))

      console.log("Fetching environment variables for " + herokuAppName)
      env = {}
      return heroku.get("/apps/" + herokuAppName + "/config-vars", function(err, configVars) {
        if (err) throw(err)
        var k, v
        for (k in configVars) {
          v = configVars[k]
          if (!(addon_config_vars.indexOf(k) > -1)) {
            env[k] = v
          }
        }

        if (Object.keys(env).length > 0) {
          app.env = env;
        }

        fs.writeFile(process.cwd() + "/app.json", app.toJSON(), function(err) {
          if (err) console.error(err)
          console.log("Created app.json\n")
          console.log(app.toJSON())
        })

      })
    })


  })

program
  .command("validate <file>")
  .description("Validate the app.json file in the current directory")
  .action(function(file){

    // console.log(args)

    var manifest = process.cwd() + "/app.json"
    if (fs.existsSync(manifest)) {

      try {
        JSON.parse(fs.readFileSync(manifest).toString())
      } catch(err) {
        return console.error("Found an app.json file, but it's invalid JSON.")
      }

      var app = App.new(manifest)

      if (app.valid) {
        console.log("\nYour app.json file is valid!\n")
        console.log(app.toJSON())
      } else {
        console.log("Found an app.json file, but it's got some issues:")
        console.log(app.errors.split("\n"))
      }
    } else {
      console.log("No app.json found. Use `app init` to create one.")
    }
  })

program
  .command("schema")
  .option('--markdown', 'Write the schema in markdown format')
  .option('--html', 'Write the schema in HTML format')
  .description("Write the app.json schema to STDOUT")
  .action(function(program){
    if (program.markdown) {
      process.stdout.write(App.templates.schema.render(App.schema))
    } else if (program.html) {
      process.stdout.write(marked(App.templates.schema.render(App.schema)))
    } else {
      process.stdout.write(JSON.stringify(App.schema.properties, null, 2))
    }
  })

program
  .command("concoct <repo>")
  .description("Deploy an app from GitHub using a shorthand URL.")
  .action(function(repo){
    var concoctBin = path.resolve(__dirname, '../bin/concoct')
    var go = require('child_process').spawn(concoctBin, [repo])

    go.stdout.on('data', function (data) {
      process.stdout.write(data.toString())
    })

    go.stderr.on('data', function (data) {
      console.log(data.toString())
    })

    go.on('exit', function (code) {
      console.log('child process exited with code ' + code)
    })

  })

// Print this after the generated help text
program.on("--help", function(){
  console.log("  Use 'app <command> --help' to get more information about a specific command.")
  console.log('')
})

program.parse(process.argv)

if(program.args.length < 1){
  program.help()
}

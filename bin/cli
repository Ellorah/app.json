#!/usr/bin/env node

var fs = require("fs")
var path = require("path")
var program = require("commander")
var marked = require("marked")
var titlecase = require("to-title-case")
var chalk = require("chalk")
var gh = require("github-url-to-object")
var merge = require("merge")
var heroku = require("../lib/heroku").init()
var App = require("..")

function green(msg) {
  console.log(chalk.green(msg))
}

function red(msg) {
  console.error(chalk.red(msg))
}

program
  .command("init")
  .description("Create an app.json for the current directory's app")
  .option("-a, --app <heroku-app-name>", "Heroku app name from which to derive addons and env")
  .action(function(program){

    if (fs.existsSync(process.cwd() + "/app.json")) {
      return console.error("This directory already contains an app.json.\nTo validate it, run: app.json validate\nTo update it, run: app.json update")
    }

    var app = App.new()
    app.name = titlecase(path.basename(process.cwd()))
    app.description = "TODO: Add a short description about " + app.name
    app.keywords = ["small", "sharp", "tool"]
    app.website = "TODO: Add website URL"
    app.repository = "TODO: Add repository URL"
    app.logo = "TODO: Add logo URL"
    app.addons = []
    app.env = {}

    var done = function() {
      fs.writeFile(process.cwd() + "/app.json", app.toJSON, function(err) {
        if (err) console.error(err)
        green("Created app.json\n")
        console.log(app.toJSON)
      })
    }

    if (program.app) {
      heroku.deriveAddonsAndEnv(program.app, function(err, addons_and_env) {
        if (err) return console.error(err)
        app = merge(app, addons_and_env)
        return done()
      })

    } else {
      heroku.deriveAppNamesFromLocalGitConfig(function(err, names) {
        if (err) return console.error(err)

        if (!names.length) return done()

        if (names.length > 1) {
          console.log("Multiple Heroku git remotes found. Try one of these commands:\n")
          names.forEach(function(name) {
            console.log("app.json init -a " + name)
          })
          return
        }

        heroku.deriveAddonsAndEnv(names[0], function(err, addons_and_env) {
          if (err) return console.error(err)
          app = merge(app, addons_and_env)
          return done()
        })

      })
    }

  })


program
  .command("update")
  .description("Update an existing app.json with your Heroku app's current configuration")
  .option("-a, --app <heroku-app-name>", "Heroku app name from which to derive addons and env")
  .action(function(program){

    if (!fs.existsSync(process.cwd() + "/app.json")) {
      return console.error("No app.json file found. Run `app.json init` to create one.")
    }

    var app = App.new(process.cwd() + "/app.json")

    var done = function() {
      fs.writeFile(process.cwd() + "/app.json", app.toJSON, function(err) {
        if (err) console.error(err)
        green("Updated app.json\n")
        console.log(app.toJSON)
      })
    }

    if (program.app) {
      heroku.deriveAddonsAndEnv(program.app, function(err, addons_and_env) {
        if (err) return console.error(err)
        app = merge(app, addons_and_env)
        return done()
      })

    } else {
      heroku.deriveAppNamesFromLocalGitConfig(function(err, names) {
        if (err) return console.error(err)

        if (!names.length) return done()

        if (names.length > 1) {
          console.log("Multiple Heroku git remotes found. Try one of these commands:\n")
          names.forEach(function(name) {
            console.log("app.json update -a " + name)
          })
          return
        }

        heroku.deriveAddonsAndEnv(names[0], function(err, addons_and_env) {
          if (err) return console.error(err)
          app = merge(app, addons_and_env)
          return done()
        })

      })
    }

  })


program
  .command("validate")
  .description("Validate the app.json file in the current directory")
  .action(function(program){

    var manifest = process.cwd() + "/app.json"
    if (fs.existsSync(manifest)) {

      try {
        JSON.parse(fs.readFileSync(manifest).toString())
      } catch(err) {
        return red("Found an app.json file, but it's invalid JSON.")
      }

      var app = App.new(manifest)

      if (app.valid) {
        green("\nYour app.json file is valid!\n")
        console.log(app.toJSON)
      } else {
        red("\nFound an app.json file, but it's got some issues:\n")
        console.error(app.errorString)
      }
    } else {
      red("\nNo app.json found. Use `app.json init` to create one.\n")
    }
  })

program
  .command("schema")
  .option('--markdown', 'Write the schema in markdown format')
  .option('--html', 'Write the schema in HTML format')
  .description("Write the app.json schema to STDOUT")
  .action(function(program){
    if (program.markdown) {
      process.stdout.write(App.templates.schema.render(App.schema))
    } else if (program.html) {
      process.stdout.write(marked(App.templates.schema.render(App.schema)))
    } else {
      process.stdout.write(JSON.stringify(App.schema.properties, null, 2))
    }
  })

program
  .command("deploy [repo]")
  .description("Deploy an app.json-enabled app from GitHub using its shorthand URL.")
  .action(function(repo){
    var build
    console.log("\nCloning " + gh(repo).https_url)
    heroku.clone(repo)

    heroku.on("created", function(build) {
      console.log("Created %s.herokuapp.com", build.app.name)
      process.stdout.write("Building")
    })

    heroku.on("pending", function() {
      process.stdout.write(".")
    })

    heroku.on("error", function(err) {
      console.error(err)
    })

    heroku.on("succeeded", function(build) {
      console.log("\nSuccess!\n View your new app at " + build.resolved_success_url)
    })

  })

// Print this after the generated help text
program.on("--help", function(){
  console.log("  Use 'app <command> --help' to get more information about a specific command.")
  console.log('')
})

program.parse(process.argv)

if(program.args.length < 1){
  program.help()
}
